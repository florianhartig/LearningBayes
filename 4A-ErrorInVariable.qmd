---
output: html_document
editor_options:
  chunk_output_type: console
---

```{r, include=FALSE}
set.seed(42)
```

# Error in variable models

::: callout-note
In this chapter, we will discuss 

:::

## Regression dillution in distribution estimates

```{r, echo=F, warning=F, message=F}
set.seed(123)
rm(list=ls(all=TRUE))
library(rjags)
library(R2jags)
```

### Creation of the data

Assume we observe data from an ecological system that creates an exponential size distribution (e.g. tree sizes, see [Taubert, F.; Hartig, F.; Dobner, H.-J. & Huth, A. (2013) On the Challenge of Fitting Tree Size Distributions in Ecology. PLoS ONE, 8, e58036-](http://www.plosone.org/article/info%3Adoi%2F10.1371%2Fjournal.pone.0058036)), but our measurments are performed with a substantial lognormal observation error

```{r}
meanSize <- 10
trueLogSd <- 1
sampleSize <- 500
truevalues = rexp(rate = 1/meanSize, n = sampleSize)
observations = rlnorm(n = length(truevalues), mean = log(truevalues), sd = trueLogSd)
```

Plotting true and observed data

```{r}
maxV <- ceiling(max(observations,truevalues))
counts <- rbind(
  obs = hist(observations, breaks = 0:maxV, plot = F)$counts,
  true = hist(truevalues, breaks = 0:maxV, plot = F)$counts
)
barplot(log(t(counts)+1), beside=T)

```

### Fitting a non-hierarchical model leads to bias

```{r}
normalModel = textConnection('
                             model {
                             # Priors
                             meanSize ~ dunif(1,100)
                             
                             # Likelihood
                             for(i in 1:nObs){
                             true[i] ~ dexp(1/meanSize)
                             }
                             }
                             ')

# Bundle data
positiveObservations <- observations[observations>0]
data = list(true = positiveObservations, nObs=length(positiveObservations))

# Parameters to be monitored (= to estimate)
params = c("meanSize")

jagsModel = jags.model( file= normalModel , data=data, n.chains = 3, n.adapt= 500)
results = coda.samples( jagsModel , variable.names=params,n.iter=5000)
plot(results)

```

The main thing to note about this is that parameter estimates are heavily biased.

### Fitting a hierarchical model removes the bias

Model specification if hierarchical model that accounts for the observation error in Jags

```{r}
hierarchicalModel = textConnection('
                                   model {
                                   # Priors
                                   meanSize ~ dunif(1,100)
                                   sigma ~ dunif(0,20) # Precision 1/variance JAGS and BUGS use prec instead of sd
                                   precision <- pow(sigma, -2)
                                   
                                   # Likelihood
                                   for(i in 1:nObs){
                                   true[i] ~ dexp(1/meanSize)
                                   observed[i] ~ dlnorm(log(true[i]), precision)
                                   }
                                   }
                                   ')
# Bundle data
data = list(observed = observations, nObs=length(observations))
# Parameters to be monitored (= to estimate)
params = c("meanSize", "sigma")

jagsModel = jags.model( file= hierarchicalModel , data=data, n.chains = 3, n.adapt= 500)
#update(jagsModel, 2500) # updating without sampling
results = coda.samples( jagsModel , variable.names=params,n.iter=5000)
plot(results)
```

It's always good to check the correlation structure in the posterior

## Regression dilution in slope estimates

```{r}
library(EcoData)
library(rjags)

nobs = nrow(volcanoisland)

# imagine we had a very bad measurement devide for the altitude
volcanoisland$sAltitudeR = volcanoisland$sAltitude + rnorm(nobs)

plot(log(windObs) ~ sAltitude, data = volcanoisland)
fit = lm(log(windObs) ~ sAltitude, data = volcanoisland)
summary(fit)
abline(fit, col = "red")

fit = lm(log(windObs) ~ sAltitudeR, data = volcanoisland)
summary(fit)
abline(fit, col = "blue")
```

let's see if we can correct the error

```{r}
data = list(WindObs = log(volcanoisland$windObs),
            Altitude = volcanoisland$sAltitudeR,
            plot = as.numeric(volcanoisland$plot),
            nobs = nobs,
            nplots = length(unique(volcanoisland$plot)))


modelCode = "model{

  # Likelihood
  for(i in 1:nobs){

    # error on y
    WindObs[i] ~ dnorm(mu[i],tau)

    # error on x
    Altitude[i] ~ dnorm(TrueAltitude[plot[i]],tauMeasure)

    mu[i] <- AltitudeEffect*TrueAltitude[plot[i]]+ Intercept
  }
  
  # Prior distributions
  
  # For location parameters, normal choice is wide normal
  AltitudeEffect ~ dnorm(0,0.0001)
  Intercept ~ dnorm(0,0.0001)

  for(i in 1:nplots){
     TrueAltitude[i] ~ dnorm(0,0.0001)
  }

  # For scale parameters, normal choice is decaying
  tau ~ dgamma(0.001, 0.001)
  sigma <- 1/sqrt(tau)

  tauMeasure ~ dgamma(0.001, 0.001)
  sdMeasure <- 1/sqrt(tauMeasure)

}
"

jagsModel <- jags.model(file= textConnection(modelCode), data=data, n.chains = 3)

para.names <- c("AltitudeEffect","Intercept","sigma", "sdMeasure")
Samples <- coda.samples(jagsModel, variable.names = para.names, n.iter = 5000)
plot(Samples)
summary(Samples)

```
